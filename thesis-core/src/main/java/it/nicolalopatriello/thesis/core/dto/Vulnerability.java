package it.nicolalopatriello.thesis.core.dto;

import it.nicolalopatriello.thesis.core.entities.VulnerabilityEntity;
import lombok.Getter;
import lombok.Setter;

import java.sql.Timestamp;


@Getter
@Setter
public class Vulnerability extends DTO {
    private Long id;
    private String cveId;
    private Long cvePublishedAt;
    private Long cveModifiedAt;
    private Double cvss;
    private String cvssVector;
    private String cvePatch;
    private Long dependencyId;


    public VulnerabilityEntity to() {
        VulnerabilityEntity vulnerabilityEntity = new VulnerabilityEntity();
        vulnerabilityEntity.setId(id);
        vulnerabilityEntity.setCveId(cveId);
        if (cvePublishedAt != null)
            vulnerabilityEntity.setCvePublishedAt(new Timestamp(cvePublishedAt));
        if (cveModifiedAt != null)
            vulnerabilityEntity.setCveModifiedAt(new Timestamp(cveModifiedAt));
        vulnerabilityEntity.setCvss(cvss);
        vulnerabilityEntity.setCvssVector(cvssVector);
        vulnerabilityEntity.setCvePatch(cvePatch);
        vulnerabilityEntity.setDependencyId(dependencyId);
        return vulnerabilityEntity;
    }


    public static Vulnerability from(VulnerabilityEntity vulnerabilityEntity) {
        Vulnerability dto = new Vulnerability();
        dto.setId(vulnerabilityEntity.getId());
        dto.setCveId(vulnerabilityEntity.getCveId());
        if (vulnerabilityEntity.getCvePublishedAt() != null)
            dto.setCvePublishedAt(vulnerabilityEntity.getCvePublishedAt().getTime());
        if (vulnerabilityEntity.getCveModifiedAt() != null)
            dto.setCveModifiedAt(vulnerabilityEntity.getCveModifiedAt().getTime());
        dto.setCvss(vulnerabilityEntity.getCvss());
        dto.setCvssVector(vulnerabilityEntity.getCvssVector());
        dto.setCvePatch(vulnerabilityEntity.getCvePatch());
        dto.setDependencyId(vulnerabilityEntity.getDependencyId());
        return dto;
    }

}
