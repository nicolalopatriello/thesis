package it.nicolalopatriello.thesis.core.dto.dependecy;

import com.vdurmont.semver4j.Semver;
import it.nicolalopatriello.thesis.common.Jsonizable;
import it.nicolalopatriello.thesis.core.dto.VersionWithOperator;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

@Log4j
@Getter
@Setter
public class PythonVulnerability extends HashMap<String, List<PythonVulnerability.Item>> {

    @Getter
    @Setter
    public static class Item {
        private String advisory;
        private String cve;
        private String id;
        private List<String> specs;
        private String v;

        public boolean match(String version) {
            boolean match = false;
            for (String spec : specs) {
                log.info("Item version to check: " + spec + " - Input version: " + version);
                if (!match) {
                    Optional<VersionWithOperator> s = VersionWithOperator.from(spec);
                    if (s.isPresent())
                        match = compare(s.get(), version);
                }
            }
            System.err.println("match: " + match);
            return match;
        }

        private boolean compare(VersionWithOperator vo, String version) {
            switch (vo.getOperator()) {
                case LOWER_THEN_OR_EQUAL_TO:
                    return new Semver(version).isLowerThanOrEqualTo(vo.getVersion());
                case LOWER:
                    return new Semver(version).isLowerThan(vo.getVersion());
                case EQUALS:
                    return new Semver(version).isEqualTo(vo.getVersion());
                case GREATER:
                    return new Semver(version).isGreaterThan(vo.getVersion());
                case GREATER_THEN_OR_EQUAL_TO:
                    return new Semver(version).isGreaterThanOrEqualTo(vo.getVersion());
            }
            return false;
        }
    }

    public static Optional<PythonVulnerability> from(File f) {
        try {
            HashMap<?, ?> obj = Jsonizable.fromFile(f, HashMap.class);
            obj.remove("$meta");
            Optional<PythonVulnerability> t = Optional.ofNullable(Jsonizable.fromJson(Jsonizable.toJson(obj), PythonVulnerability.class));
            return t;
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }
        return Optional.empty();
    }
}
