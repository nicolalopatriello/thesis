package it.nicolalopatriello.thesis.core.entities;

import it.nicolalopatriello.thesis.core.Schema;
import it.nicolalopatriello.thesis.core.dto.Vulnerability;
import it.nicolalopatriello.thesis.core.dto.WithDTO;
import it.nicolalopatriello.thesis.core.jpa.SearchCriteria;
import it.nicolalopatriello.thesis.core.jpa.SimpleSearchSpecification;
import lombok.Data;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.sql.Timestamp;


@Entity
@Table(name = "vulnerability", schema = Schema.SCHEMA_NAME)
@Data
public class VulnerabilityEntity implements WithDTO<Vulnerability> {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column
    private Long id;

    @NotNull
    @Column(name = "cve_id")
    private String cveId;

    @Column(name = "cve_published_at")
    private Timestamp cvePublishedAt;

    @Column(name = "cve_modified_at")
    private Timestamp cveModifiedAt;

    @Column
    private Double cvss;

    @Column(name = "cvss_vector")
    private String cvssVector;

    @Column(name = "cve_patch")
    private String cvePatch;

    @Column(name = "dependency_id")
    private Long dependencyId;


    @Override
    public Vulnerability dto() {
        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setId(id);
        vulnerability.setCveId(cveId);
        if (cvePublishedAt != null)
            vulnerability.setCvePublishedAt(cvePublishedAt.getTime());
        if (cveModifiedAt != null)
            vulnerability.setCveModifiedAt(cveModifiedAt.getTime());
        vulnerability.setCvss(cvss);
        vulnerability.setCvssVector(cvssVector);
        vulnerability.setCvePatch(cvePatch);
        vulnerability.setDependencyId(dependencyId);
        return vulnerability;
    }

    public static class Specification extends SimpleSearchSpecification<VulnerabilityEntity> {
        public Specification(SearchCriteria criteria) {
            super(criteria);
        }
    }
}